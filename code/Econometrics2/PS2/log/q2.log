
. set obs 100
Number of observations (_N) was 0, now 100.

. gen e = rnormal(0, 1)

. gen t = rnormal(1, 1)

. gen x  = (_n > 50)

. gen y0 = 5 * x  + e 

. gen y1 = y0 + t

. egen sate = mean(t)

. scalar sate = sate

. dis sate
1.0598215

. 
. *2c
. cap program drop montecarloc 

. program define montecarloc, rclass
  1. gen random = runiform()
  2. sort random
  3. gen d = (_n/_N) <= .25
  4. gen y = y1 * d + (1 - d) * y0 
  5. reg y d
  6. return scalar b = _b[d]
  7. return scalar se = _se[d]
  8. test _b[d] == `=sate'
  9. return scalar p = r(p)
 10. drop d y random
 11. end     

. preserve

. simulate bc = r(b) sec = r(se) pc = r(p), reps(1000) saving(output/2c.dta, replace): montecarloc

      Command: montecarloc
           bc: r(b)
          sec: r(se)
           pc: r(p)

Simulations (1,000): .........10.........20.........30.........40.........50.........60.........70.........80.........90.........100.........110.........120.........130.........140.........150.........160.........170.........180.........190.........200...
> ......210.........220.........230.........240.........250.........260.........270.........280.........290.........300.........310.........320.........330.........340.........350.........360.........370.........380.........390.........400.........410....
> .....420.........430.........440.........450.........460.........470.........480.........490.........500.........510.........520.........530.........540.........550.........560.........570.........580.........590.........600.........610.........620.....
> ....630.........640.........650.........660.........670.........680.........690.........700.........710.........720.........730.........740.........750.........760.........770.........780.........790.........800.........810.........820.........830......
> ...840.........850.........860.........870.........880.........890.........900.........910.........920.........930.........940.........950.........960.........970.........980.........990.........1,000 done

. restore

. 
. *2d
. cap program drop montecarlod

. program define montecarlod, rclass
  1. gen random = runiform()
  2. sort random
  3. gen d = (_n/_N) <= .5
  4. gen y = y1 * d + (1 - d) * y0 
  5. reg y d
  6. return scalar b = _b[d]
  7. return scalar se = _se[d]
  8. test _b[d] == `=sate'
  9. return scalar p = r(p)
 10. drop d y random
 11. end     

. preserve

. simulate bd = r(b) sed = r(se) pd = r(p), reps(1000) saving(output/2d.dta, replace): montecarlod

      Command: montecarlod
           bd: r(b)
          sed: r(se)
           pd: r(p)

Simulations (1,000): .........10.........20.........30.........40.........50.........60.........70.........80.........90.........100.........110.........120.........130.........140.........150.........160.........170.........180.........190.........200...
> ......210.........220.........230.........240.........250.........260.........270.........280.........290.........300.........310.........320.........330.........340.........350.........360.........370.........380.........390.........400.........410....
> .....420.........430.........440.........450.........460.........470.........480.........490.........500.........510.........520.........530.........540.........550.........560.........570.........580.........590.........600.........610.........620.....
> ....630.........640.........650.........660.........670.........680.........690.........700.........710.........720.........730.........740.........750.........760.........770.........780.........790.........800.........810.........820.........830......
> ...840.........850.........860.........870.........880.........890.........900.........910.........920.........930.........940.........950.........960.........970.........980.........990.........1,000 done

. restore

. 
. *2e
. cap program drop montecarloe

. program define montecarloe, rclass
  1. gen random = runiform()
  2. sort x random
  3. by x: gen d = (_n/_N) <= .25
  4. gen y = y1 * d + (1 - d) * y0 
  5. reg y d
  6. return scalar b = _b[d]
  7. return scalar se = _se[d]
  8. test _b[d] == `=sate'
  9. return scalar p = r(p)
 10. drop d y random
 11. end     

. preserve

. simulate be = r(b) see = r(se) pe = r(p), reps(1000) saving(output/2e.dta, replace): montecarloe

      Command: montecarloe
           be: r(b)
          see: r(se)
           pe: r(p)

Simulations (1,000): .........10.........20.........30.........40.........50.........60.........70.........80.........90.........100.........110.........120.........130.........140.........150.........160.........170.........180.........190.........200...
> ......210.........220.........230.........240.........250.........260.........270.........280.........290.........300.........310.........320.........330.........340.........350.........360.........370.........380.........390.........400.........410....
> .....420.........430.........440.........450.........460.........470.........480.........490.........500.........510.........520.........530.........540.........550.........560.........570.........580.........590.........600.........610.........620.....
> ....630.........640.........650.........660.........670.........680.........690.........700.........710.........720.........730.........740.........750.........760.........770.........780.........790.........800.........810.........820.........830......
> ...840.........850.........860.........870.........880.........890.........900.........910.........920.........930.........940.........950.........960.........970.........980.........990.........1,000 done

. restore

. 
. *2f
. use output/2c.dta, clear
(simulate: montecarloc)

. merge 1:1 _n using output/2d.dta, nogen

    Result                      Number of obs
    -----------------------------------------
    Not matched                             0
    Matched                             1,000  
    -----------------------------------------

. merge 1:1 _n using output/2e.dta, nogen

    Result                      Number of obs
    -----------------------------------------
    Not matched                             0
    Matched                             1,000  
    -----------------------------------------

. twoway (kdensity bc) (kdensity bd) (kdensity be), xline(1) legend(order(1 "c" 2 "d" 3 "e" )) xtitle("SATE")

. graph export Output/2f.png, replace
file Output/2f.png saved as PNG format

. 
. *2g
. gen n = _n

. reshape long b se p, i(n) j(q) string
(j = c d e)

Data                               Wide   ->   Long
-----------------------------------------------------------------------------
Number of observations            1,000   ->   3,000       
Number of variables                  10   ->   5           
j variable (3 values)                     ->   q
xij variables:
                               bc bd be   ->   b
                            sec sed see   ->   se
                               pc pd pe   ->   p
-----------------------------------------------------------------------------

. drop n

. gen signif = p < 0.05

. label variable b "coef"

. label variable se "se"

. label variable signif "p < .05"

. foreach j in c d e { 
  2. replace q = "(`w')" if q == "_`w'"
  3. }
(0 real changes made)
(0 real changes made)
(0 real changes made)

. table () q, statistic(sd b) statistic(mean se signif) nototal  nformat(%9.3f)

-------------------------------------------
                   |            q          
                   |      c       d       e
-------------------+-----------------------
Standard deviation |                       
  coef             |  0.706   0.585   0.284
Mean               |                       
  se               |  0.664   0.582   0.676
  p < .05          |  0.062   0.050   0.000
-------------------------------------------

. cap log close
